# 1. Реализовать класс Matrix (матрица). Обеспечить перегрузку конструктора класса (метод __init__()), который должен
# принимать данные (список списков) для формирования матрицы.
# Подсказка: матрица — система некоторых математических величин, расположенных в виде прямоугольной схемы.
# Примеры матриц вы найдете в методичке.
# Следующий шаг — реализовать перегрузку метода __str__() для вывода матрицы в привычном виде.
# Далее реализовать перегрузку метода __add__() для реализации операции сложения двух объектов класса Matrix
# (двух матриц). Результатом сложения должна быть новая матрица.
# Подсказка: сложение элементов матриц выполнять поэлементно — первый элемент первой строки первой матрицы складываем
# с первым элементом первой строки второй матрицы и т.д.

class Matrix:
    def __init__(self, matrix_lists):
        self.matrix_lists = matrix_lists

    # сделал сначала цикл, потом подглядел реализацию преподавателя.
    # в методе __add__ пришлось бы повторять цикл, поэтому оставляю одной красивой строкой
    def __str__(self):
        # result = ''
        # for row in self.matrix_lists:
        #     result = f'{result}{row}\n'
        # return result
        return '\n'.join(map(str, self.matrix_lists)) + '\n'

    def __add__(self, other):
        result = []
        # хотел посмотреть значения и индексы в отладчике, поэтому enumerate
        # достаточно было использовать range, оставлю как есть
        for i, row in enumerate(self.matrix_lists):
            result.append([])
            for j, el in enumerate(row):
                result[i].append(self.matrix_lists[i][j] + other.matrix_lists[i][j])
        return '\n'.join(map(str, result))


matrix1 = Matrix([[1, 2, 3], [6, 5, 4], [7, 9, 8]])
print(matrix1)
matrix2 = Matrix([[1, 1, 1], [2, 2, 2], [3, 3, 3]])
print(matrix2)

print(matrix1 + matrix2)
